PROJECT(main)

#SET (CMAKE_C_COMPILER             "/usr/local/bin/clang")
#SET (CMAKE_CXX_COMPILER           "/usr/local/bin/clang++")
MESSAGE(STATUS "project_name: " ${PROJECT_NAME})
MESSAGE(STATUS "demo project_source_name: " ${PROJECT_SOURCE_DIR})
MESSAGE (STATUS "project binary dir: " ${PROJECT_BINARY_DIR})
MESSAGE (STATUS "project source dir: " ${PROJECT_SOURCE_DIR})
MESSAGE(STATUS" cmake_current_binary_dir:${CMAKE_CURRENT_BINARY_DIR}")
MESSAGE(STATUS" cmake_current_source_dir:${CMAKE_CURRENT_SOURCE_DIR}")

#SET(src_list add1.cpp)
FILE(GLOB_RECURSE src_list ${PROJECT_SOURCE_DIR} *.cpp)
MESSAGE(STATUS "global collect files: " ${PROJECT_SOURCE_DIR})
ADD_DEFINITIONS(-DDEBUG)
MESSAGE (STATUS "CMAKE_C_FLAGS:  ${CMAKE_C_FLAGS}")
MESSAGE (STATUS "CMAKE_CXX_FLAGS:  ${CMAKE_CXX_FLAGS}")
MESSAGE (STATUS "clang CMAKE_C_COMPILER:  ${CMAKE_C_COMPILER}")
MESSAGE (STATUS "clang CMAKE_CXX_COMPILER:  ${CMAKE_CXX_COMPILER}")
SET(CMAKE_C_FLAGS "${CMAKE_C_FLAGS} -g3")
SET(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} -g3")
IF(CMAKE_BUILD_TYPE STREQUAL "Release")
    MESSAGE (STATUS "CMAKE_BUILD_TYPE is Release, to strip file")
    set(CMAKE_EXE_LINKER_FLAGS_RELEASE "-s")
ENDIF()
MESSAGE (STATUS "CMAKE_BUILD_TYPE: ${CMAKE_BUILD_TYPE}")
OPTION(CMAKE_BUILD_TYPE "This is a option for release" "Release")
MESSAGE (STATUS "CMAKE_BUILD_TYPE: ${CMAKE_BUILD_TYPE}")
INCLUDE_DIRECTORIES(${PROJECT_SOURCE_DIR}/../add2 ${PROJECT_SOURCE_DIR}/../add1 ${PROJECT_SOURCE_DIR}/../add)
#INCLUDE_DIRECTORIES(${PROJECT_SOURCE_DIR}/../add)
MESSAGE(STATUS "add path: " ${PROJECT_SOURCE_DIR}/../build/add)
FIND_LIBRARY(dependent_libs NAMES add add1 add2 PATHS ${PROJECT_SOURCE_DIR}/../build/add ${PROJECT_SOURCE_DIR}/../build/add1 ${PROJECT_SOURCE_DIR}/../build/add2)
#TARGET_INCLUDE_DIRECTORIES(${PROJECT_NAME} PUBLIC add1)
LINK_DIRECTORIES(${PROJECT_SOURCE_DIR}/build/add ${PROJECT_SOURCE_DIR}/build/add1 ${PROJECT_SOURCE_DIR}/build/add2 )
ADD_EXECUTABLE(${PROJECT_NAME} ${src_list})
TARGET_LINK_LIBRARIES(${PROJECT_NAME} add add1 add2)
MESSAGE(STATUS "dependent_libs: " ${dependent_libs})
IF(dependent_libs)
TARGET_LINK_LIBRARIES(${PROJECT_NAME} ${dependent_libs})
ENDIF(dependent_libs)

INSTALL(TARGETS ${PROJECT_NAME} DESTINATION bin)


